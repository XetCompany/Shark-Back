# Generated by Django 5.0.4 on 2024-04-09 20:34

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Количество')),
            ],
            options={
                'verbose_name': 'Товар в корзине',
                'verbose_name_plural': 'Товары в корзине',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='GroupPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_reversed', models.BooleanField(default=False, verbose_name='Обратный путь')),
            ],
            options={
                'verbose_name': 'Путь заказа',
                'verbose_name_plural': 'Пути заказа',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='GroupPaths',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Количество')),
            ],
            options={
                'verbose_name': 'Группа путей заказа',
                'verbose_name_plural': 'Группы путей заказа',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Количество')),
            ],
            options={
                'verbose_name': 'Заказной продукт',
                'verbose_name_plural': 'Заказные продукты',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Категория товара',
                'verbose_name_plural': 'Категории товаров',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='Логин')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='E-mail')),
                ('fullname', models.CharField(blank=True, max_length=255, null=True, verbose_name='ФИО')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, default=None, max_length=128, null=True, region=None, verbose_name='Телефон')),
                ('description', models.TextField(blank=True, max_length=255, null=True, verbose_name='Описание')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('products', models.ManyToManyField(to='app.cartproduct', verbose_name='Товары')),
            ],
            options={
                'verbose_name': 'Корзина',
                'verbose_name_plural': 'Корзины',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='EvaluationAndComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation', models.PositiveIntegerField(verbose_name='Оценка')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Оценка и комментарий',
                'verbose_name_plural': 'Оценки и комментарии',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='GroupPathsRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.grouppath', verbose_name='Путь заказа')),
                ('group_paths', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.grouppaths', verbose_name='Группа путей')),
            ],
            options={
                'verbose_name': 'Связь группы путей и пути заказа',
                'verbose_name_plural': 'Связи группы путей и пути заказа',
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='grouppaths',
            name='paths',
            field=models.ManyToManyField(through='app.GroupPathsRelation', to='app.grouppath', verbose_name='Пути'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'В процессе'), ('awaiting', 'Ожидает забора'), ('adopted', 'Принят'), ('declined', 'Отклонен')], default='in_progress', max_length=255, verbose_name='Статус')),
                ('decline_reason', models.TextField(blank=True, default=None, null=True, verbose_name='Причина отклонения')),
                ('group_paths', models.ManyToManyField(to='app.grouppaths', verbose_name='Группы путей')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('products', models.ManyToManyField(to='app.orderproduct', verbose_name='Заказные продукты')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Path',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.PositiveIntegerField(verbose_name='Время прохождения(В часах)')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена прохождения(В рублях)')),
                ('length', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Протяженность(В километрах)')),
                ('type', models.CharField(choices=[('automobile', 'Автомобильный'), ('railway', 'Железнодорожный'), ('sea', 'Морской'), ('river', 'Речной'), ('air', 'Воздушный')], default='automobile', max_length=255, verbose_name='Тип прохождения')),
                ('point_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_a', to='app.city', verbose_name='Точка А')),
                ('point_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_b', to='app.city', verbose_name='Точка Б')),
            ],
            options={
                'verbose_name': 'Путь',
                'verbose_name_plural': 'Пути',
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='grouppath',
            name='path',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.path', verbose_name='Путь'),
        ),
        migrations.AddField(
            model_name='user',
            name='paths',
            field=models.ManyToManyField(to='app.path', verbose_name='Пути'),
        ),
        migrations.CreateModel(
            name='PointInCity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('type', models.CharField(choices=[('warehouse', 'Склад'), ('pickup_point', 'Пункт выдачи')], max_length=255, verbose_name='Тип')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.city', verbose_name='Город')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Компания')),
            ],
            options={
                'verbose_name': 'Точка в городе',
                'verbose_name_plural': 'Точки в городах',
                'ordering': ('id',),
                'unique_together': {('city', 'type', 'company')},
            },
        ),
        migrations.AddField(
            model_name='grouppaths',
            name='warehouse',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.pointincity', verbose_name='Склад'),
        ),
        migrations.CreateModel(
            name='ProductCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='product_companies/', verbose_name='Фото')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена')),
                ('sizes', models.CharField(blank=True, max_length=255, null=True, verbose_name='Размеры')),
                ('weight', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Масса')),
                ('description', models.TextField(blank=True, max_length=255, null=True, verbose_name='Описание')),
                ('is_available', models.BooleanField(default=True, verbose_name='Доступность для покупателя')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.productcategory', verbose_name='Категория')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Компания производитель')),
                ('evaluations', models.ManyToManyField(to='app.evaluationandcomment', verbose_name='Оценки и комментарии')),
            ],
            options={
                'verbose_name': 'Изделие производства',
                'verbose_name_plural': 'Изделия производства',
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.productcompany', verbose_name='Изделие производства'),
        ),
        migrations.AddField(
            model_name='grouppaths',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.productcompany', verbose_name='Изделие производства'),
        ),
        migrations.AddField(
            model_name='cartproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.productcompany', verbose_name='Изделие производства'),
        ),
        migrations.CreateModel(
            name='ProductInWarehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Количество')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.productcompany', verbose_name='Изделие производства')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.pointincity', verbose_name='Склад')),
            ],
            options={
                'verbose_name': 'Изделие на складе',
                'verbose_name_plural': 'Изделия на складах',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ResetPasswordToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, unique=True, verbose_name='Токен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Токен для сброса пароля',
                'verbose_name_plural': 'Токены для сброса пароля',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SearchInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groups_paths', models.ManyToManyField(to='app.grouppaths', verbose_name='Группы путей')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Информация о поиске',
                'verbose_name_plural': 'Информации о поиске',
                'ordering': ('id',),
            },
        ),
    ]
